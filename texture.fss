#version 330 core
struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 position;
};
out vec4 FragColor;

in vec2 TexCoord;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
in vec3 Normal;
in vec3 fragPos;

void main()
{
	float specularStrength = 0.5;
	vec3 norm = normalize(Normal);
	//goroud shading
	//--------------------------------
	//ambient
	vec3 ambient = material.ambient * light.ambient;

	//diffuse
	vec3 viewDir = normalize(viewPos - fragPos);	
	vec3 lightDir = normalize(light.position - fragPos);
	float diffuseAmount = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * (diffuseAmount * material.diffuse);

	//specular
	vec3 reflectDir = reflect(-lightDir, norm);	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (material.specular * spec) * light.specular;

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, 1.0);
}
