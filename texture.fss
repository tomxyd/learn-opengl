#version 330 core
struct Material
{
	//vec3 ambient; removed since ambient is the same as diffuse
	sampler2D diffuse;
	sampler2D specular;
	sampler2D emission;
	float shininess;
};

struct Light
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 position;
};
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 fragPos;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
	vec3 norm = normalize(Normal);
	//goroud shading
	//--------------------------------
	//ambient
	vec3 ambient = light.ambient * texture(material.diffuse, TexCoord).rgb ;

	//diffuse
	vec3 viewDir = normalize(viewPos - fragPos);	
	vec3 lightDir = normalize(light.position - fragPos);
	float diffuseAmount = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diffuseAmount * texture(material.diffuse, TexCoord).rgb;

	//specular
	vec3 reflectDir = reflect(-lightDir, norm);	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, TexCoord).rgb;  

        //emission
	vec3 emission = texture(material.emission, TexCoord).rgb;
	vec3 result = (ambient + diffuse + specular + emission);
	FragColor = vec4(result, 1.0);
}
